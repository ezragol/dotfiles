(defvar powerreveal false)
(defvar volumereveal false)
(defvar musicreveal false)
(defvar wifireveal false)
(defvar wifi "")

(deflisten volume
  :initial 0
"tail -f ~/.config/hypr/volume.txt")

(deflisten muted
  :initial "yes"
"tail -f ~/.config/hypr/mute.txt")

(defpoll wtitle
  :interval "2s"
  :initial ""
  "hyprctl activewindow | grep title | awk -F'title:' '{print (NF>1)? $NF : \"\"}' | rev | cut -d '-' -f1 | rev")

(defvar currenthover "")
(defvar losthover "")

(defvar statsvisible false)

(deflisten cover
  :initial ""
  "/home/ezra/.config/eww/cover.sh"
)

(deflisten title
  :initial ""
  "playerctl --follow metadata --format {{title}}"
)

(deflisten artist
  :initial ""
  "playerctl --follow metadata --format {{artist}}"
)

(deflisten album
  :initial ""
  "playerctl --follow metadata --format {{album}}"
)

(deflisten length
  :initial "0"
  "playerctl --follow metadata --format {{mpris:length}}"
)

(defpoll pos
  :interval "1s"
  :initial "0"
  :run-while {artist != ""}
  "playerctl position"
)

(defpoll position
  :initial 0
  :interval "1s"
  :run-while {artist != ""}
  "/home/ezra/.config/hypr/position.sh"
)

(deflisten playing
  :initial "Paused"
  "playerctl --follow status"
)

(defpoll brightness
  :interval "1s"
  :run-while {statsvisible}
  "cat /sys/class/backlight/intel_backlight/brightness"
)

(defpoll numchrome
  :interval "10s"
  :initial 0
"/home/ezra/.config/eww/num.sh google-chrome")

(defpoll numspotify
  :interval "10s"
  :initial 0
"/home/ezra/.config/eww/num.sh Spotify")

(defpoll numcode
  :interval "10s"
  :initial 0
"/home/ezra/.config/eww/num.sh Code")

(defpoll notifications
  :interval "1s"
  :initial ""
  :run-while {statsvisible}
"makoctl list")

(defvar statslide true)

(defwidget clock [align]
  (box
    :space-evenly false
    :halign {align}
    :orientation "v"
    (box
      :class "bigtime"
      :halign {align}
      {formattime(EWW_TIME, "%R")}
    )
    (box
      :class "date"
      :halign {align}
      {formattime(EWW_TIME, "%A, %B %d")}
    )
  )
)

(defwidget hoverbtn [name class onclick]
  (eventbox
    :onhover "eww update currenthover=${name} && eww update losthover=\"\""
    :onhoverlost "eww update losthover=${name}"
    (button
      :class {currenthover == name && losthover != name ? "hovered " + class : class}
      :onclick {onclick}
      (children)
    )
  )
)

(defwidget zerobasednum [num class]
  (label :class {class} :text {num < 10 ? ("0${num}") : num})
)

(defwidget icon [name ?class ?scale]
  (image
    :path "/home/ezra/.config/hypr/images/${name}"
    :image-width {scale != "" ? scale : 18}
    :image-height {scale != "" ? scale : 18}
    :class {class}
  )
)

(defwidget volumeicon [scale]
  (icon :name "volume_${muted == "yes" ? "off" : volume < 100 ? volume == 0 ? "mute" : "low" : "high"}.png" :scale {scale})
)

(defwidget notifcenter []
  (box
    :orientation "v"
    :space-evenly false
    :halign "start"
    :valign "start"
    (for notif in {notifications.data[0]}
      (box
        :space-evenly false
        :halign "start"
        :class "notif"
        (box
          :class "notif-icon"
          (icon :name "${notif.app-name.data == "Spotify" ? "spotify_white.svg" : notif.app-name.data == "Google Chrome" ? "chrome_white.png" : ""}" :scale 40)
        )
        (box
          :orientation "v"
          :halign "start"
          :valign "center"
          :space-evenly false
          (label :text {notif.summary.data} :class "notif-title" :xalign 0 :wrap true :width 200)
          (label :text {notif.body.data} :class "notif-sub" :xalign 0 :wrap true :width 200)
        )
      )
    )
    (box
      :class "no-notif"
      :halign "center"
      :valign "center"
      :visible {notifications.data[0][0] == "null"}
      :width 300
      :height 200
      (label :xalign 0.85 :yalign 0.55 :text "no new notifications")
    )
  )
)

(defwindow dock
  :monitor 0
  :geometry (geometry
    :x 0
    :y 0
    :width "100%"
    :anchor "top center"
  )
  :stacking "fg"
  :exclusive true
  :focusable false
  (eventbox
    :onhoverlost "eww update currenthover=\"\""
    (centerbox
      (box
        :halign "start"
        :space-evenly false
        (hoverbtn
          :name "powermenu"
          :class "pbutton"
          :onclick "eww update powerreveal=${!powerreveal}"
          (icon :name "arch.svg")
        )
        (revealer
          :reveal {powerreveal}
          :transition "slideright"
          :duration "250ms"
          (box
            :halign "center"
            :space-evenly false
            (hoverbtn
              :name "poweroff"
              :class "pwrbutton"
              :onclick "shutdown now"
              "power off"
            )
            (hoverbtn
              :name "reboot"
              :class "pwrbutton"
              :onclick "reboot"
              "reboot"
            )
          )
        )
        (hoverbtn
          :name "chrome"
          :onclick "/home/ezra/.config/eww/select.sh google-chrome google-chrome-stable flags --ozone-platform-hint=auto --ozone-platform=wayland &"
          :class "launchbtn"
          (box
            :space-evenly false
            (icon :name "chrome.png" :class "song" :scale 20)
            (label :class "percent" :text "chrome${numchrome > 0 ? ' ('+numchrome+')' : ''}")
          )
        )
        (hoverbtn
          :name "spotify"
          :onclick "/home/ezra/.config/eww/select.sh Spotify spotify &"
          :class "launchbtn"
          (box
            :space-evenly false
            (icon :name "spotify.svg" :class "song")
            (label :class "percent" :text "spotify${numspotify > 0 ? ' ('+numspotify+')' : ''}")
          )
        )
        (hoverbtn
          :name "code"
          :onclick "/home/ezra/.config/eww/select.sh Code code"
          :class "launchbtn"
          (box
            :space-evenly false
            (icon :name "code.svg" :class "song")
            (label :class "percent" :text "vscode${numcode > 0 ? ' ('+numcode+')' : ''}")
          )
        )
      )
      (label :class "percent" :text {wtitle})
      (box
        :halign "end"
        :class "right-side"
        :space-evenly false
        (revealer
          :reveal {musicreveal && artist != ""}
          :transition "slideright"
          :duration "250ms"
          (box
            :space-evenly false
            (label :class "song" :text {title} :wrap true :limit-width 20)
            (hoverbtn
              :name "audioback"
              :class ""
              :onclick "playerctl back"
              (icon :name "audio_back.png" :scale 23)
            )
            (hoverbtn
              :name "audioplay"
              :class ""
              :onclick "playerctl play-pause"
              (icon :name "audio_${playing == "Paused" ? "play" : "pause"}.png" :scale 20)
            )
            (hoverbtn
              :name "audionext"
              :class "song"
              :onclick "playerctl next"
              (icon :name "audio_next.png" :scale 23)
            )
            "("
              (label :text {(round(pos / 60, 0) < (pos / 60) ? round(pos / 60, 0) : (round(pos / 60, 0) - 1))})
              ":"
              (zerobasednum
                :num {(round(pos % 60, 0) < (pos % 60) ? round(pos % 60, 0) : (round(pos % 60, 0) - 1))}
                :class ""
              )
              "/ "
              (label :text {round(length / 60000000, 0) < (length / 60000000) ? round(length / 60000000, 0) : (round(length / 60000000, 0) - 1)})
              ":"
              (zerobasednum
                :num {round(((length / 60000000) - (round(length / 60000000, 0) < (length / 60000000) ? round(length / 60000000, 0) : (round(length / 60000000, 0) - 1))) * 60, 0)}
                :class ""
              )
              (label :class "song" :text ")")
          )
        )
        (hoverbtn
          :name "music"
          :onclick "eww update musicreveal=${!musicreveal}"
          :class "pbutton"
          (icon :name "music.png")
        )
        (revealer
          :reveal {wifireveal}
          :transition "slideright"
          :duration "250ms"
          (box
            :space-evenly false
            :class "volbtn"
            {wifi}
          )
        )
        (hoverbtn
          :name "wifi"
          :class "wifibtn"
          :onclick "eww update wifireveal=${!wifireveal} && /home/ezra/.config/hypr/getwifi.sh"
          (icon :name "wifi.png" :scale 20)
        )
        (revealer
          :reveal {volumereveal}
          :transition "slideleft"
          :duration "250ms"
          (box
            :space-evenly false
            (scale
              :max 101
              :width 100
              :height 3
              :value {volume / 2}
              :onchange "/home/ezra/.config/hypr/setvol.sh {}"
            )
          )
        )
        (hoverbtn
          :name "volumemenu"
          :class "volbtn"
          :onclick "eww update volumereveal=${!volumereveal}"
          (volumeicon :scale 21)
        )
        (box
          :class "battperc vol song"
          (box
            :class "percent"
            {EWW_BATTERY.BAT0.capacity + "%"}
          )
          (icon :name "battery_${EWW_BATTERY.BAT0.status == "Charging" ? "charging" : EWW_BATTERY.BAT0.capacity < 10 ? "critical" : EWW_BATTERY.BAT0.capacity < 25 ? "low" : EWW_BATTERY.BAT0.capacity < 40 ? "down" : EWW_BATTERY.BAT0.capacity < 55 ? "mid" : EWW_BATTERY.BAT0.capacity < 70 ? "up" : EWW_BATTERY.BAT0.capacity < 85 ? "high" : "full"}.png" :class "song")
        )
        (label
          :class "percent right"
          :text {formattime(EWW_TIME, "%l:%M %p")}
        )
        (hoverbtn
          :name "stats"
          :class "volbtn"
          :onclick "eww update statsvisible=${!statsvisible}"
          (icon :name "stats.png" :scale 20)
        )
      )
    )
  )
)

(defwindow stats
  :monitor 0
  :geometry (geometry
    :x 0
    :y 0
    :width 845
    :anchor "top right"
  )
  :stacking "fg"
  :exclusive false
  :focusable false
  (box
    :width 845
    :height 325
    :visible {statsvisible}
    :class "statwindow"
    :space-evenly false
    (box
      :orientation "v"
      :space-evenly false
      :valign "start"
      (box
        :halign "fill"
        :width 530
        :class "statshead"
        (label :text {statslide ? "notifications" : "spotify"} :class "header" :halign "start")
        (box
          :halign "end"
          :space-evenly false
          (button
            :onclick "eww update statslide=${!statslide}"
            (box
              (icon :name "arrow_left.png" :scale 22)
              (icon :name "arrow_right.png" :scale 22)
            )
          )
        )
      )
      (box
        :visible {statslide}
        :class "calendar"
        :space-evenly false
        :halign "fill"
        (box
          :orientation "v"
          :halign "start"
          :valign "start"
          :space-evenly false
          (box
            :class "disk"
            :width 65
            :height 65
            (percent
              :value {EWW_TEMPS["CORETEMP_CORE_0"]}
              :style "color: ${EWW_TEMPS["CORETEMP_CORE_0"] > 40 ? EWW_TEMPS["CORETEMP_CORE_0"] > 50 ? "red" : "orange" : "white"}"
              :label "${EWW_TEMPS["CORETEMP_CORE_0"]}°C"
            )
          )
          (label :class "statlab" :text "cpu temp")
          (box
            :class "disk"
            :width 65
            :height 65
            (percent
              :value {EWW_DISK["/"].used_perc}
              :style "color: ${EWW_DISK["/"].used_perc > 75 ? EWW_DISK["/"].used_perc > 90 ? "red" : "orange" : "white"}"
              :label "${round(EWW_DISK["/"].used / 1000000000, 0)}Gb"
            )
          )
          (label :class "statlab" :text "disk usage")
        )
        (box
          :class "cal"
          (notifcenter)
        )
      )
      (box
        :orientation "v"
        :space-evenly false
        :valign "start"
        :visible {!statslide && artist != ""}
        (box
          :halign "end"
          :valign "start"
          :class "leftstat spot"
          :space-evenly false
          (box
            :orientation "v"
            :valign "center"
            :halign "end"
            :class "leftstat"
            (box
              :orientation "v"
              :space-evenly false
              :class "song-info"
              (label :text {title} :class "title" :wrap true :limit-width 20)
              (label :text {artist} :class "artist" :wrap true :limit-width 40)
              (label :text {album} :class "album" :limit-width 40)
            )
            (centerbox
              :class "actions"
              :width 275
              (button
                :onclick "playerctl previous"
                (icon :name "audio_back_white.png" :scale 33)
              )
              (button
                :onclick "playerctl play-pause"
                (icon :name "audio_${playing == "Playing" ? "pause" : "play"}_white.png" :scale 33)
              )
              (button
                :onclick "playerctl next"
                (icon :name "audio_next_white.png" :scale 33)
              )
            )
          )
          (box
            :class "cover"
            (image
              :path {cover}
              :image-height 165
              :image-width 165
            )
          )
        )
        (progress
          :value {position}
          :width 10
          :class "songprog"
        )
      )
      
    )
    (box
      :class "clock"
      :valign "start"
      :halign "end"
      :orientation "v"
      :space-evenly false
      (clock :align "end")
      (box
        :orientation "v"
        :valign "start"
        :class "leftstat"
        (box
          :class "progress"
          :valign "center"
          :space-evenly false
          (progress
            :value {EWW_CPU.avg}
            :class "bar firstbar"
          )
          (icon :name "cpu.png" :scale 25)
        )
        (box
          :class "progress"
          :valign "center"
          :space-evenly false
          (progress
            :value {EWW_RAM.used_mem_perc}
            :class "bar"
          )
          (icon :name "memory.png" :scale 27)
        )
        (box
          :class "progress"
          :valign "center"
          :space-evenly false
          (progress
            :value {brightness / 960}
            :class "bar"
          )
          (icon :name "brightness_${brightness / 960 < 25 ? "low" : brightness / 960 < 50 ? "down" : brightness / 960 < 75 ? "mid" : "high"}.png" :scale 26)
        )
      )
    )
  )
)

(defwidget percent [value style label ?clockwise]
  (circular-progress
    :thickness 5
    :clockwise {clockwise == true ? true : false}
    :start-at 75
    :value {value}
    :style {style}
    (label
      :class "gauge-label"
      :text {label}
    )
  )
)

(defwidget app [click image]
  (button
    :onclick {click}
    (image
      :path "/usr/share/icons/Papirus/48x48/apps/${image}.svg"
      :image-width 70
      :image-height 70
    )
  )
)